{"version":3,"sources":["img/AirlyBlue.png","img/Loader.svg","components/Search.js","components/Header.js","components/Parameters.js","components/City.js","components/SearchFail.js","components/Spinner.js","components/App.js","index.js"],"names":["module","exports","__webpack_require__","p","Search","props","_useState","useState","_useState2","Object","slicedToArray","searchValue","setSearchValue","react_default","a","createElement","className","minLength","maxLength","value","onChange","e","target","type","onClick","search","Header","href","src","airlyLogo","alt","Parameters","City","searched","city","airState","sensorPlace","measuredValues","length","map","measurment","style","name","background","key","SearchFail","Spinner","spinner","App","setSearched","_useState3","_useState4","setCity","_useState5","_useState6","setAirState","_useState7","_useState8","setSensorPlace","_useState9","_useState10","setMeasuredValues","_useState11","_useState12","searchValidated","setSearchValidated","_useState13","_useState14","loading","setLoading","useEffect","fetch","then","res","ok","json","resolved","catch","err","console","log","preventDefault","concat","response","getMeasurements","Number","lat","toFixed","lon","toLowerCase","lng","searchSuccess","setTimeout","apiHeaders","Accept","Apikey","Accept-Language","measurements","headers","places","Promise","all","values","extractedValues","address","current","indexes","description","street","components_Header","components_Parameters","components_Search","components_Spinner","components_City","components_SearchFail","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.dcc975ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AirlyBlue.198d14d3.png\";","module.exports = __webpack_public_path__ + \"static/media/Loader.7aa6373b.svg\";","import React, { useState } from 'react';\r\n\r\n\r\n\r\n\r\nconst Search = (props) => {\r\n\r\n    const [searchValue, setSearchValue] = useState(\"\")\r\n    const currentInput = (e) => { setSearchValue(e.target.value) }\r\n    const resetInput = () => { setSearchValue(\"\") }\r\n\r\n    return (\r\n        <form className=\"search\">\r\n            <input className=\"search--input\"\r\n                minLength=\"2\"\r\n                maxLength=\"40\"\r\n                value={searchValue}\r\n                onChange={currentInput}\r\n                type=\"text\" />\r\n            <input className=\"search--btn\" onClick={(e) => { props.search(e, searchValue); resetInput() }} type=\"submit\" value=\"Take a Breath!\" />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport airlyLogo from '../img/AirlyBlue.png'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1 className=\"header--title\" >Take a Breath!</h1>\r\n            <p className=\"header--description\">This app is meant to give you an idea about air condition in different polish cities. It operates thanks to three different APIs listed below.</p>\r\n            <ol className=\"header--list\">\r\n                <li className=\"header--listItem\">Airly for gathering pollution indexes <a className=\"header--link\" target=\"blank\" href=\"https://airly.eu\"> (read more) <img className=\"header--airly\" src={airlyLogo} alt=\"airly logo\" /></a> </li>\r\n                <li className=\"header--listItem\">Nominatim for gathering geolocation information <a className=\"header--link\" target=\"blank\" href=\"https://nominatim.org\">(read more)</a> </li>\r\n                <li className=\"header--listItem\">IP-API for getting the initial state of the app with your current location <a className=\"header--link\" target=\"blank\" href=\"http://ip-api.com\">(read more)</a>. The web is quite a complicated place, so sometimes this API will mistake your current location with something rather odd.</li>\r\n            </ol>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Parameters = () => {\r\n    return (<div className=\"parameters\">\r\n        <h2 className=\"parameters--title\">Parameters</h2>\r\n        <p className=\"parameters--description\">Some sensors provided by the API output more information, some less. The main three values that are predominant in most measurements are PM2.5, PM10 and PM1.</p>\r\n        <p className=\"parameters--description\">PM1 is the most toxic. Due to its size it may percolate dirrectly to the bloodstream of the person inhaling it. PM2.5 is slightly bigger, and as such gets stuck in the alveoli of human (and non-human) lungs. PM10 is the most common one and stays inside the lungs, without entering the alveoli or bloodstream dirrectly. </p>\r\n        <p className=\"parameters--description\">The search engine will provide you with the nearest station's sensor output. Be aware, that it is sensitive to diacritic signs (\"ń\", \"ą\" and others) - if you search for Poznan instead of Poznań - it will still find your destination, but the search engine might get confused sometimes.</p>\r\n    </div>);\r\n}\r\n\r\nexport default Parameters;\r\n","import React from 'react';\r\n\r\n\r\nconst pollutionColor = (name, value) => {\r\n\r\n    if (name === \"PM25\" && value < 25) {\r\n        return { background: \"linear-gradient(to right, #1e960080 80%, #fff20080, #ff000080)\" }\r\n    }\r\n    if (name === \"PM25\" && (value >= 25 && value <= 40)) {\r\n        return { background: \"linear-gradient(to right, #1e960080 20%, #fff20080 80%, #ff000080 )\" }\r\n    }\r\n    if (name === \"PM25\" && value > 40) {\r\n        return { background: \"linear-gradient(to right, #1e960080, #fff20080, #ff000080 20%)\" }\r\n    }\r\n    if (name === \"PM10\" && value < 50) {\r\n        return { background: \"linear-gradient(to right, #1e960080 80%, #fff20080, #ff000080)\" }\r\n    }\r\n    if (name === \"PM10\" && (value >= 50 && value <= 80)) {\r\n        return { background: \"linear-gradient(to right, #1e960080 20%, #fff20080 80%, #ff000080)\" }\r\n    }\r\n    if (name === \"PM10\" && value > 80) {\r\n        return { background: \"linear-gradient(to right, #1e960080, #fff20080, #ff000080 20%)\" }\r\n    }\r\n\r\n}\r\n\r\nconst City = (props) => {\r\n\r\n    // <span className=\"capitalize\"> </span>\r\n\r\n    return (\r\n        <div className=\"fetchedInfo\">\r\n            {props.searched === props.city ? <h3 className=\"fetchedInfo--title\"> Sensors in <span className=\"fetchedInfo--capitalize\">{props.searched}</span> found! </h3> : <h3 className=\"fetchedInfo--title\">No sensors in the exact location (<span className=\"fetchedInfo--capitalize\">{props.searched}</span>)</h3>}\r\n            {props.searched === props.city ? <p className=\"fetchedInfo--basic\">We have sensors in <span className=\"fetchedInfo--capitalize\">{props.city}</span>. {props.airState}</p> : <p className=\"fetchedInfo--basic\"><span className=\"fetchedInfo--reminder\"> The nearest sensor we found is in <span className=\"fetchedInfo--capitalize\">{props.city}</span>.</span> {props.airState} </p>}\r\n            <p className=\"fetchedInfo--basic\"> The measurements for <span className=\"fetchedInfo--capitalize\">{props.city}</span> you'll find below are based on what we analyzed on <span className=\"fetchedInfo--capitalize\"> {props.sensorPlace} </span> street, but there might be other sensors over at <span className=\"fetchedInfo--capitalize\">{props.city}</span>. If you want to try, you can add a street name to the search.</p>\r\n            <h4 className=\"fetchedInfo--subtitle\">Here is what we got:</h4>\r\n            <ul className=\"fetchedInfo--measured\">\r\n                {props.measuredValues.length > 0 ? props.measuredValues.map(measurment => {\r\n                    return (\r\n                        <li className=\"fetchedInfo--specific\" style={pollutionColor(measurment.name, measurment.value)} key={measurment.name}>\r\n                            {measurment.name} : {measurment.value}\r\n                        </li>)\r\n                }) : <li>Strange, but it seams sensors for <span className=\"fetchedInfo--capitalize\">{props.searched} </span>  are currently unavailable. Sorry for the inconveniance. </li>}\r\n            </ul>\r\n            <p className=\"fetchedInfo--basic\">\r\n                The WHO norms for PM2.5 is 25 μg/m3, for PM10 50 μg/m3. Ultrafine particles (PM1) are still under investigation, as the norm is hard to identify.\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default City;","import React from 'react';\r\n\r\nconst SearchFail = (props) => {\r\n    return (<div className=\"failedSearch\">\r\n        <h4 className=\"failedSearch--title\">Hold up!\r\n</h4>\r\n        <p className=\"failedSearch--info\">\r\n            Are you sure you were searching for a place inside Poland? </p>     </div>);\r\n}\r\n\r\nexport default SearchFail;","import React from 'react';\r\nimport spinner from '../img/Loader.svg'\r\n\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"preloader\">\r\n            <h2 className=\"preloader--title\">Breathing in the data</h2>\r\n            <img className=\"preloader--spinner\" src={spinner} alt=\"preloader spinner\"></img>\r\n        </div >);\r\n}\r\n\r\nexport default Spinner;","import React, { useState, useEffect } from 'react';\nimport Search from './Search'\nimport Header from './Header'\nimport Parameters from './Parameters'\nimport City from './City';\nimport SearchFail from './SearchFail'\nimport Spinner from './Spinner'\nimport '../style.scss'\n\nconst App = () => {\n\n  const [searched, setSearched] = useState(\"\")\n  const [city, setCity] = useState(\"\");\n  const [airState, setAirState] = useState(\"\")\n  const [sensorPlace, setSensorPlace] = useState(\"\")\n  const [measuredValues, setMeasuredValues] = useState([])\n  const [searchValidated, setSearchValidated] = useState(false)\n  const [loading, setLoading] = useState(null)\n\n  const airlyApi = \"0QMeVpdC5bNVH7xwQlkEOZJ9FYBB5NCa\"\n\n  useEffect(() => {\n    fetch(' http://ip-api.com/json/').then(res => {\n      if (!res.ok) { throw res; }\n      res.json()\n    }).then(resolved => { search(null, resolved.city) }).catch(err => console.log(err))\n  }, [])\n\n\n  const search = (e, searchValue) => {\n    if (e) {\n      e.preventDefault();\n    }\n    if (searchValue.length > 2 & searchValue !== \"\") {\n      setLoading(true)\n      fetch(`https://nominatim.openstreetmap.org/search?q=${searchValue}&format=json&limit=1&namedetails=1`).then(res => res.json()).then(response => {\n        if (response[0]) {\n          setSearchValidated(true)\n          getMeasurements(Number(response[0].lat).toFixed(2), Number(response[0].lon).toFixed(2));\n          setSearched(searchValue.toLowerCase())\n        }\n        else {\n          setLoading(false)\n          setSearchValidated(false)\n        }\n      })\n    }\n  }\n  const getMeasurements = (lat, lng) => {\n    if (lat > 49.04 && lat < 54.84 && lng > 14.12 && lng < 24.15) {\n      searchSuccess(lat, lng)\n    }\n    else {\n      setTimeout(() => { setLoading(false) }, 1000);\n      setSearchValidated(false)\n    }\n  }\n  const searchSuccess = (lat, lng) => {\n\n    let apiHeaders = {\n      Accept: \"application/json\",\n      Apikey: `${airlyApi}`, \"Accept-Language\": \"en\"\n    }\n    let measurements = fetch(`https://airapi.airly.eu/v2/measurements/nearest?lat=${lat}&lng=${lng}&maxResults=3&maxDistanceKM=100`, { headers: apiHeaders })\n    let places = fetch(`https://airapi.airly.eu/v2/installations/nearest?lat=${lat}&lng=${lng}&maxResults=3&maxDistanceKM=100`, { headers: apiHeaders })\n\n\n    Promise.all([measurements, places]).then(values => Promise.all(values.map(value => value.json()))).then(extractedValues => {\n      setCity(extractedValues[1][0].address.city.toLowerCase()); setAirState(extractedValues[0].current.indexes[0].description); setSensorPlace(extractedValues[1][0].address.street ? extractedValues[1][0].address.street : \"a not specified\"); setMeasuredValues(extractedValues[0].current.values); setTimeout(() => { setLoading(false) }, 1000);\n    })\n\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__info\">\n        <Header />\n        <Parameters />\n      </div>\n      <div className=\"App__results\">\n        <Search search={search} />\n        {loading ? <Spinner /> : searchValidated ? (<City searched={searched} city={city} airState={airState} sensorPlace={sensorPlace} measuredValues={measuredValues} />) : (<SearchFail />)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}